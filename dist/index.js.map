{
  "version": 3,
  "sources": ["../lib/log1p_series.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a Taylor series expansion `pow(-1, k-1) * pow(x, k) / k` for `ln(1 + x)`.\n*\n* @private\n* @param {number} x - the value at which to evaluate the series\n* @returns {Function} series function\n*/\nfunction log1pSeries( x ) {\n\tvar mMult = -x;\n\tvar mProd = -1.0;\n\tvar k = 0;\n\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tmProd *= mMult;\n\t\tk += 1;\n\t\treturn mProd / k;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = log1pSeries;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar FLOAT_EPS = require( '@stdlib/constants-float64-eps' );\nvar sumSeries = require( '@stdlib/math-base-tools-sum-series' );\nvar log1pSeries = require( './log1p_series.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates \\\\( \\operatorname{log1pmx}(x) = \\ln(1+x) - x \\\\).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log1pmx( 1.1 );\n* // returns ~-0.358\n*\n* @example\n* var v = log1pmx( 0.99 );\n* // returns ~-0.302\n*\n* @example\n* var v = log1pmx( -0.99 );\n* // returns ~-3.615\n*\n* @example\n* var v = log1pmx( -1.1 );\n* // returns NaN\n*\n* @example\n* var v = log1pmx( NaN );\n* // returns NaN\n*/\nfunction log1pmx( x ) {\n\tvar opts;\n\tvar ax;\n\tif ( x <= -1.0 ) {\n\t\treturn NaN;\n\t}\n\tax = abs( x );\n\tif ( ax > 0.95 ) {\n\t\treturn ln( 1.0 + x ) - x;\n\t}\n\tif ( ax < FLOAT_EPS ) {\n\t\treturn -x * x / 2.0;\n\t}\n\topts = {\n\t\t'initialValue': -x\n\t};\n\treturn sumSeries( log1pSeries( x ), opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = log1pmx;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate \\\\( \\operatorname{log1pmx}(x) = \\ln(1+x) - x \\\\).\n*\n* @module @stdlib/math-base-special-log1pmx\n*\n* @example\n* var log1pmx = require( '@stdlib/math-base-special-log1pmx' );\n*\n* var v = log1pmx( 1.1 );\n* // returns ~-0.358\n*\n* v = log1pmx( 0.99 );\n* // returns ~-0.302\n*\n* v = log1pmx( -0.99 );\n* // returns ~-3.615\n*\n* v = log1pmx( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar log1pmx = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = log1pmx;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAyCA,SAASC,EAAaC,EAAI,CACzB,IAAIC,EAAQ,CAACD,EACTE,EAAQ,GACRC,EAAI,EAER,OAAOC,EAQP,SAASA,GAAO,CACf,OAAAF,GAASD,EACTE,GAAK,EACED,EAAQC,CAChB,CACD,CAKAL,EAAO,QAAUC,IChEjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAmCA,IAAIC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAY,QAAS,+BAAgC,EACrDC,EAAY,QAAS,oCAAqC,EAC1DC,EAAc,IA+BlB,SAASC,EAASC,EAAI,CACrB,IAAIC,EACAC,EACJ,OAAKF,GAAK,GACF,KAERE,EAAKR,EAAKM,CAAE,EACPE,EAAK,IACFP,EAAI,EAAMK,CAAE,EAAIA,EAEnBE,EAAKN,EACF,CAACI,EAAIA,EAAI,GAEjBC,EAAO,CACN,aAAgB,CAACD,CAClB,EACOH,EAAWC,EAAaE,CAAE,EAAGC,CAAK,GAC1C,CAKAR,EAAO,QAAUM,ICjDjB,IAAII,EAAU,IAKd,OAAO,QAAUA",
  "names": ["require_log1p_series", "__commonJSMin", "exports", "module", "log1pSeries", "x", "mMult", "mProd", "k", "next", "require_main", "__commonJSMin", "exports", "module", "abs", "ln", "FLOAT_EPS", "sumSeries", "log1pSeries", "log1pmx", "x", "opts", "ax", "log1pmx"]
}
